import React, { useState, useEffect } from "react";
import { GetAxiosData } from "../api/ApiMethods";

const TreeView = () => {
  const [brands, setBrands] = useState([]);
  const [selectedBrands, setSelectedBrands] = useState([]);
  const [displayedBrand, setDisplayedBrand] = useState(null);

  const [selectedModels, setSelectedModels] = useState([]);
  const [displayedModel, setDisplayedModel] = useState(null);

  useEffect(() => {
    // Fetch data when component mounts
    GetAxiosData("/").then((response) => {
      setBrands(response.data);
    });
  }, []);

  const handleBrandClick = (brand) => {
    // Toggle brand selection
    if (selectedBrands.includes(brand)) {
      setSelectedBrands(selectedBrands.filter((b) => b !== brand));
    } else {
      setSelectedBrands([...selectedBrands, brand]);
      const brandModels = brand.models.map((model) => model.model_name);
      const brandVariants = brand.models.flatMap((model) =>
        model.variants.map((variant) => variant.variant_name)
      );
      setSelectedModels([...selectedModels, ...brandModels, ...brandVariants]);
    }
  };
  const handleModelClick = (model) => {
    // Toggle model selection
    const brandOfModel = brands.find((brand) =>
      brand.models.some((m) => m.model_name === model)
    );
  
    // Toggle model selection
    if (selectedModels.includes(model)) {
      setSelectedModels(selectedModels.filter((m) => m !== model));
    } else {
      setSelectedModels([...selectedModels, model]);
    }
  
    // If all models are selected, select the brand
    const allModelsSelected = brandOfModel.models.every((m) =>
      selectedModels.includes(m.model_name)
    );
  
    if (allModelsSelected) {
      setSelectedBrands([...selectedBrands, brandOfModel]);
    } else {
      setSelectedBrands(selectedBrands.filter((b) => b !== brandOfModel));
    }
  
    // Check corresponding variants
    const modelVariants = brandOfModel.models
      .find((m) => m.model_name === model)
      .variants.map((variant) => variant.variant_name);
  
    setSelectedModels((prevSelectedModels) => [
      ...prevSelectedModels,
      ...modelVariants,
    ]);
  };
  

  const handleBrandLabelClick = (brand) => {
    setDisplayedBrand(brand);
  };

  const handleVariantClick = (variant) => {
    if (selectedModels.includes(variant)) {
      setSelectedModels(selectedModels.filter((v) => v !== variant));
    } else {
      setSelectedModels([...selectedModels, variant]);
    }
  };

  const handleModelLabelClick = (model) => {
    setDisplayedModel(model);
  };

  return (
    <>
      <div className="container">
        <div className="row">
          <div className="col-lg-4">
            <h3 className="text-center">Brands</h3>
            {brands.map((brand) => (
              <div key={brand.id} className="form-check">
                <input
                  type="checkbox"
                  className="form-check-input"
                  checked={selectedBrands.includes(brand)}
                  onChange={() => handleBrandClick(brand)}
                />
                <label
                  className="form-check-label"
                  onClick={() => handleBrandLabelClick(brand)}
                >
                  {brand.brand_name}
                </label>
              </div>
            ))}
          </div>
          <div className="col-lg-4">
            <h3 className="text-center">Models</h3>
            {displayedBrand &&
              displayedBrand.models.map((model) => (
                <div key={model.id} className="form-check">
                  <input
                    type="checkbox"
                    className="form-check-input"
                    checked={selectedModels.includes(model.model_name)}
                    onChange={() => handleModelClick(model.model_name)}
                  />
                  <label
                    className="form-check-label"
                    onClick={() => handleModelLabelClick(model)}
                  >
                    {model.model_name}
                  </label>
                </div>
              ))}
          </div>
          <div className="col-lg-4">
            <h3 className="text-center">Variants</h3>
            {displayedModel &&
              displayedModel.variants.map((variant) => (
                <div key={variant.id} className="form-check">
                  <input
                    type="checkbox"
                    className="form-check-input"
                    checked={selectedModels.includes(variant.variant_name)}
                    onChange={() => handleVariantClick(variant.variant_name)}
                  />
                  <label className="form-check-label">
                    {variant.variant_name}
                  </label>
                </div>
              ))}
          </div>
        </div>
      </div>
    </>
  );
};

export default TreeView;
